% Matlab fumdamentals
% Transpose a Vector
b = [2;3;5;7]        
c = b'               

% Concatenating Arrays
% Horizontal Concatenation
A = rand(3,4) % 3 rows and 4 cols
B = rand(3,2)
C = [A, B]
% Vertical Concatenation
A = rand(3,4)
B = rand(2,4)
C = [A; B]

% Reshaping Arrays
x = rand(260,1)
y = reshape(x,5,52)
y = reshape(x,5,[]) % leave one of the dimensions blank when calling reshape and that dimension will be calculated automatically. 

% Accessing Multiple Elements of Arrays
% remove elements from vector 
                            output:
v = [1 2 3 4 5]             [1 2 3 4 5] 
v([2 4]) = []               [1 3 5]
   
% round numbers in an array M to n decimal places
round(M,n)

% identify and count missing values in a vector
isnan(v)
% count the number of missing values 
nnz(isnan(v)) % nnz: number non-zero

% Statistical Operations on Matrices
% Many statistical functions accept an optional dimensional argument 
A = rand(12, 20)
% mean() calculates the average of each column by default
mean(A, "omitnan") % omitting missing values
mean(A, 2, "omitnan") % by row
% min() and max() min and max functions also calculate the minimum and maximum of the columns of a matrix by default
% They omit missing values by default
min(A,[],2) % by rows
%  get the mean, minimum, and maximum, of all of the elements in array
max(A, [], "all")
min(A, [], "all")
mean(A, "all")

% calculate the difference between elements of a  vector
diff()
%  calculates the sum of an element with all the previous elements of a vector
% if the input is a matrix, the sums are calculated by column
cumsum( ) 

% Backslash Operator for the caculation of Matrix 
x=B/A	% Solves x*A = B (for x)
x=A\B	% Solves A*x = B (for x)

% Plot type
stem()
stairs()
area()
scatter(A, B, S, "K") % S：size of the markers; K : color

% Changing X-Axis Tick Labels
xticklabels(["Label 1" "Label 2" ...])
xticks([1 2 3]) % set the x-axis tick values 
xtickangle()  % change the angle of the text

%  set the x- and y-axis limits
xlim([1 9])
ylim([2 4])

% if matrix is an m-by-n matrix, then x = n, y = m
surf(X,Y,matrix)
mesh(yr, mth, revenue)
contour(yr, mth, revenue)


% Logical Operations and Variables
A & B % A and B
A | B % A or B
A & ~B % A and NOT B 

%  find if any of the elements in a logical vector are true
any([true true false])
% find if all the elements in a logical vector are true
all([true true true])
%  count the Number of Non-Zero values in an array
nnz()
% Use the NOT operator ~ on the logical vector to change the logical values
a = [true true false]
b = ~a

% use the function find() to find the indices of the true values in a logical vector

v = [false true true false false true true false];
idx = find(v, 2, "last/first") % obtain the locations of just the first or last 2 true values in a logical vector 
idx = 
    [6 7]
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————    
% Storing Data in a Table
% Import Table Data 
data = readtable("dataFile.txt")
% we can also decdie the type of imported data
data = readtable("dataFile.txt", "TextType", "string")
% Create a table, data with variables a, b, and c
data = table(a,b,c)
% convert a matrix A to a table data, with specific variable names
data = array2table(A, "VariableNames", ["X" "Y"])
% Sort a table on specific variables
Sort = sortrows(tableName, "SortingVariable", "descend/ascend")
%  Sort by a second variables
tSort = sortrows(tableName, ["var1" "var2"],"descend/ascend")

% Remove variables from a table
% T: table name
T(:,["VarName1" "VarName2"]) = []
T = removevars(T,["VarName1" "VarName2"])
% Reorder variables in a table, using the index
T = T(:,[2 1 3:end])
% or move a column to a new location in a table.
data = movevars(data,"var2move","After",num)

% Use dot notation to index into the table T with variable VarName1 to get numeric data
numArray = tableName.VariableName
% add a new variable to a table using dot notation
tableName.NewVarName = newData

% Use curly braces to access data from multiple variables 
T = T{1:3,[2 7]};
T = T{1:3,["VarName1" "VarName2"]};

% Write table
writetable(tableName,"myFile.txt","Delimiter","\t")

_____________________________________________________________________________________________
% oncatenate two tables using square brackets(like array)
newTable = [table1 table2]
% convert an array to table
T = array2table(array, "VariableNames",["Var1" "Var2"])
%remove columns of a table 
T = removevars(tbl,["Var1" "Var2"])
%  merge two tables using any variables with the same names as key variables
newTable = join(table1,table2)

% Index into a cell array using parentheses, () will return a cell array subset
% Use curly braces {} to extract the contents of a cell
T.Properties.VariableNames{1}  % obtain a value 
T.Properties.VariableNames(1)  % obtain a cell

______________________________________________________________________________________________
% Data and time 
% Create datatime variable with numeric values 
d = datetime(year,month,day);
datetime(2014,5,25)
ans =
   25-May-2014
% six input arguments: year, month, day, hour, minutes, second
d = datetime(2016, 2, 29, 17,0,0)
$ calculate time length
timeStart = datetime(2015, 8, 8)
timeEnd = datetime(2016, 5, 17)
timeLength = timeEnd - timeStart
ans = 
    6792:00:00
% Convert timeLength to days
timeLength = days(timeLength)
% Duration functions includes  days(), hours() and minutes()
% Durations can be added up 
startTime = hours(12)
startTime = startTime + minutes(45)
ans =
     12.75 hr
% create a calendar duration from two datetime values
between(timeStart，timeEnd)

_______________________________________________________________________________________________
% Representing Discrete Categories
% convert a string array to a categorical using the categorical function
catArray = categorical(stringArray, [value1, valu2...], [name1, name2....])
% use summary() function to view categories
x = categorical([ 2 1 2 3 ])
x = 
     2      1      2      3
% more 
%  merge multiple categories into one, and even give it a new name
y = mergecats(x,["1" "3"],"C")
y = 
     2      C      2      C
% After create categories, we can use them for logical comparsion, but what's the advantages of this?
_________________________________________________________________________________________________
% Normalizing Data
% normalize data using z-scores
xNorm = normalize(X)
% center the data on zero by including the argument "center" set to "mean"
xCenter = normalize(X,"center","mean")
% normalize data by the first value
xScale = normalize(X,"scale","first")
% stretch or compress data in a range [a, b]
xRange = normalize(X,"range",[a b])

% Dealing with Missing Data
% identify NaN values
isnan()
% identifies missing values in  NaN values and other data types as well
ismissing(data,[val1 val2 val3 ...])
% covert certain value in data to nan
dataStandardized = standardizeMissing(data,-9999)
% remove missing data
[cleanX,missingIdx] = rmmissing(X)

% filling missing data
% fillmissing() function is applied to a matrix, it acts on the columns independently
% By default, the fillmissing function assumes the observations are equally spaced
% we can specify the spacing of the observations by providing a vector of location x
yinterp = fillmissing(y, "method", "SamplePoints", x)
_______________________________________________________________________________________________
% Smooth Data
% We can smooth a sine curve into a flat line if your window is big enough!
B = smoothdata(data, method, window)
% use a vector [kb kf] to specify the number of backward and forward points to include
% i.e. calculates the moving average using the current point, 5 trailing points, and 2 leading points
B = smoothdata(d,method,[5 2])
________________________________________________________________________________________________
% Linear Correlation
% use the yyaxis command to create separate axes on the left and righ
yyaxis left
plot(x1,y1)
yyaxis right
plot(x2,y2)
% calculate the correlation coefficient between two vectors
c = corrcoef(v1,v2)
% only sets of data (row) without missing values are included in the calculation
corrcoef(A,B,"Rows","complete")
% create a matrix of plots of all the sectors (columns)
plotmatrix(arrayA)

% Polynomial Fitting
% finds the coefficients of the best fit n-th degree polynomial of yData in terms of xData
cf = polyfit(xData,yData,n)
% evaluates a polynomial (given by coefficients cf) at the points xData
yEval = polyval(cf,xData)
% To avoid the numerical precision limitations by centering and scaling the x data when using polyfit and polyval
[c, ~, sc] = polyfit(x, y, deg)
yFit = polyval(c, x, [], sc)
___________________________________________________________________________________________________
% User Interaction
% show the user the warning message we specify
msg = "This is a warning!"
warning(msg)
% display information to the user
disp("Message to the user")
% Create dialog boxes that display messages, errors, or warnings
msgbox("Analysis complete","Complete!")
errordlg("Data not found","Error!")
warndlg("Missing values.","Warning!")
____________________________________________________________________________________________________
% Decision Branching
% use the switch-case construction in place of an if-elseif-else construction
switch expression
    case value_1
        code_1
    case value_2
        code_2
    otherwise
        code_3
end

% obtain the information of array size
[yRow,yCol] = size(Array)
ARow = size(Array,1)
ACol = size(Array,2)
% obtain the total number of elements in an array
numel(array)

% For Loops
for index = first:increment:last
    code
end

% while Loops
while condition
    statement 1
    statement 2
    statement 3
    …
end 
_________________________________________________________________________________________________




